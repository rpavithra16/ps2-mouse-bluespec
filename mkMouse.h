/*
 * Generated by Bluespec Compiler, version 2021.12.1 (build fd501401)
 * 
 * On Sat Jun 14 19:50:45 IST 2025
 * 
 */

/* Generation options: keep-fires */
#ifndef __mkMouse_h__
#define __mkMouse_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"


/* Class declaration for the mkMouse module */
class MOD_mkMouse : public Module {
 
 /* Clock handles */
 private:
  tClock __clk_handle_0;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
 
 /* Module state */
 public:
  MOD_Reg<tUInt8> INST_bit_count;
  MOD_Reg<tUInt8> INST_divide_reg_i;
  MOD_Reg<tUInt8> INST_enable_timer_5usec;
  MOD_Reg<tUInt8> INST_enable_timer_60usec;
  MOD_Reg<tUInt8> INST_m1_next_state;
  MOD_Reg<tUInt8> INST_m1_state;
  MOD_Reg<tUInt8> INST_m2_next_state;
  MOD_Reg<tUInt8> INST_m2_state;
  MOD_Reg<tUInt8> INST_ps2_clk_hi_z;
  MOD_Reg<tUInt8> INST_ps2_clk_i;
  MOD_Reg<tUInt8> INST_ps2_clk_ms;
  MOD_Reg<tUInt8> INST_ps2_clk_s;
  MOD_Reg<tUInt8> INST_ps2_data_hi_z;
  MOD_Reg<tUInt8> INST_ps2_data_i;
  MOD_Reg<tUInt8> INST_ps2_data_ms;
  MOD_Reg<tUInt8> INST_ps2_data_s;
  MOD_Reg<tUInt32> INST_q;
  MOD_Reg<tUInt8> INST_reset;
  MOD_Reg<tUInt8> INST_rx_data_ready;
  MOD_Reg<tUInt8> INST_rx_read;
  MOD_Reg<tUInt8> INST_rx_released;
  MOD_Reg<tUInt8> INST_rx_scan_code;
  MOD_Reg<tUInt8> INST_timer_5usec;
  MOD_Reg<tUInt8> INST_timer_5usec_count;
  MOD_Reg<tUInt32> INST_timer_60usec_count;
  MOD_Reg<tUInt8> INST_timer_done;
  MOD_Reg<tUInt8> INST_tx_data;
  MOD_Reg<tUInt8> INST_tx_error_no_ack;
  MOD_Reg<tUInt8> INST_tx_write;
 
 /* Constructor */
 public:
  MOD_mkMouse(tSimStateHdl simHdl, char const *name, Module *parent);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_RST_N;
 
 /* Port definitions */
 public:
  tUInt8 PORT_EN_set_inputs;
  tUInt32 PORT_set_inputs_inputs;
  tUInt32 PORT_get_outputs;
  tUInt8 PORT_RDY_set_inputs;
  tUInt8 PORT_RDY_get_outputs;
 
 /* Publicly accessible definitions */
 public:
  tUInt8 DEF_WILL_FIRE_set_inputs;
  tUInt8 DEF_WILL_FIRE_RL_rx_scan_code_rl;
  tUInt8 DEF_CAN_FIRE_RL_rx_scan_code_rl;
  tUInt8 DEF_WILL_FIRE_RL_timer_counter_5usec;
  tUInt8 DEF_CAN_FIRE_RL_timer_counter_5usec;
  tUInt8 DEF_WILL_FIRE_RL_m1_fsm;
  tUInt8 DEF_WILL_FIRE_RL_rl_timer_5usec;
  tUInt8 DEF_CAN_FIRE_RL_rl_timer_5usec;
  tUInt8 DEF_WILL_FIRE_RL_timer_counter_60usec;
  tUInt8 DEF_CAN_FIRE_RL_timer_counter_60usec;
  tUInt8 DEF_WILL_FIRE_RL_bit_counter;
  tUInt8 DEF_WILL_FIRE_RL_shift_reg;
  tUInt8 DEF_CAN_FIRE_RL_shift_reg;
  tUInt8 DEF_CAN_FIRE_RL_bit_counter;
  tUInt8 DEF_WILL_FIRE_RL_m2_fsm;
  tUInt8 DEF_CAN_FIRE_RL_m2_fsm;
  tUInt8 DEF_WILL_FIRE_RL_m2;
  tUInt8 DEF_CAN_FIRE_RL_m2;
  tUInt8 DEF_CAN_FIRE_RL_m1_fsm;
  tUInt8 DEF_WILL_FIRE_RL_m1_state_rule;
  tUInt8 DEF_CAN_FIRE_RL_m1_state_rule;
  tUInt8 DEF_WILL_FIRE_RL_sample_ps2;
  tUInt8 DEF_CAN_FIRE_RL_sample_ps2;
  tUInt8 DEF_CAN_FIRE_get_outputs;
  tUInt8 DEF_CAN_FIRE_set_inputs;
 
 /* Local definitions */
 private:
  tUInt8 DEF_reset_OR_bit_count_0_EQ_11_16___d118;
  tUInt8 DEF__read__h421;
  tUInt8 DEF_enable_timer_60usec__h2716;
  tUInt8 DEF_m1_state_EQ_13_0_OR_m1_state_EQ_9_8___d123;
  tUInt8 DEF_reset__h1087;
  tUInt8 DEF_m1_state__h1130;
  tUInt8 DEF_ps2_data_s__h2093;
  tUInt32 DEF__read__h519;
  tUInt32 DEF_q__h2907;
  tUInt8 DEF_x__h2861;
  tUInt8 DEF__read__h953;
  tUInt8 DEF_ps2_clk_s__h1243;
  tUInt8 DEF_tx_write__h1774;
  tUInt8 DEF_m1_state_EQ_9___d48;
  tUInt8 DEF_timer_60usec_count_2_EQ_2950___d33;
  tUInt8 DEF_m1_state_EQ_1___d9;
  tUInt8 DEF_m1_state_EQ_13___d10;
  tUInt8 DEF_m1_state_EQ_0___d12;
  tUInt8 DEF_bit_count_0_EQ_11___d116;
  tUInt8 DEF_timer_5usec_count_7_EQ_divide_reg_i_8_MINUS_1_9___d40;
  tUInt8 DEF_NOT_reset___d110;
 
 /* Rules */
 public:
  void RL_sample_ps2();
  void RL_m1_state_rule();
  void RL_m1_fsm();
  void RL_m2();
  void RL_m2_fsm();
  void RL_bit_counter();
  void RL_shift_reg();
  void RL_timer_counter_60usec();
  void RL_rl_timer_5usec();
  void RL_timer_counter_5usec();
  void RL_rx_scan_code_rl();
 
 /* Methods */
 public:
  void METH_set_inputs(tUInt32 ARG_set_inputs_inputs);
  tUInt8 METH_RDY_set_inputs();
  tUInt32 METH_get_outputs();
  tUInt8 METH_RDY_get_outputs();
 
 /* Reset routines */
 public:
  void reset_RST_N(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
 
 /* Functions for the parent module to register its reset fns */
 public:
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkMouse &backing);
  void vcd_defs(tVCDDumpType dt, MOD_mkMouse &backing);
  void vcd_prims(tVCDDumpType dt, MOD_mkMouse &backing);
};

#endif /* ifndef __mkMouse_h__ */
