/*
 * Generated by Bluespec Compiler, version 2021.12.1 (build fd501401)
 * 
 * On Sat Jun 14 19:50:45 IST 2025
 * 
 */
#include "bluesim_primitives.h"
#include "mkMouse.h"


/* Constructor */
MOD_mkMouse::MOD_mkMouse(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_bit_count(simHdl, "bit_count", this, 4u, (tUInt8)0u, (tUInt8)0u),
    INST_divide_reg_i(simHdl, "divide_reg_i", this, 8u, (tUInt8)0u, (tUInt8)0u),
    INST_enable_timer_5usec(simHdl, "enable_timer_5usec", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_enable_timer_60usec(simHdl, "enable_timer_60usec", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_m1_next_state(simHdl, "m1_next_state", this, 4u, (tUInt8)1u, (tUInt8)0u),
    INST_m1_state(simHdl, "m1_state", this, 4u, (tUInt8)1u, (tUInt8)0u),
    INST_m2_next_state(simHdl, "m2_next_state", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_m2_state(simHdl, "m2_state", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_ps2_clk_hi_z(simHdl, "ps2_clk_hi_z", this, 1u, (tUInt8)1u, (tUInt8)0u),
    INST_ps2_clk_i(simHdl, "ps2_clk_i", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_ps2_clk_ms(simHdl, "ps2_clk_ms", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_ps2_clk_s(simHdl, "ps2_clk_s", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_ps2_data_hi_z(simHdl, "ps2_data_hi_z", this, 1u, (tUInt8)1u, (tUInt8)0u),
    INST_ps2_data_i(simHdl, "ps2_data_i", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_ps2_data_ms(simHdl, "ps2_data_ms", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_ps2_data_s(simHdl, "ps2_data_s", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_q(simHdl, "q", this, 11u, 0u, (tUInt8)0u),
    INST_reset(simHdl, "reset", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_rx_data_ready(simHdl, "rx_data_ready", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_rx_read(simHdl, "rx_read", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_rx_released(simHdl, "rx_released", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_rx_scan_code(simHdl, "rx_scan_code", this, 8u, (tUInt8)0u, (tUInt8)0u),
    INST_timer_5usec(simHdl, "timer_5usec", this, 8u, (tUInt8)1u, (tUInt8)0u),
    INST_timer_5usec_count(simHdl, "timer_5usec_count", this, 8u, (tUInt8)0u, (tUInt8)0u),
    INST_timer_60usec_count(simHdl, "timer_60usec_count", this, 12u, 0u, (tUInt8)0u),
    INST_timer_done(simHdl, "timer_done", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_tx_data(simHdl, "tx_data", this, 8u, (tUInt8)0u, (tUInt8)0u),
    INST_tx_error_no_ack(simHdl, "tx_error_no_ack", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_tx_write(simHdl, "tx_write", this, 1u, (tUInt8)0u, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u)
{
  PORT_EN_set_inputs = false;
  PORT_set_inputs_inputs = 0u;
  PORT_get_outputs = 0u;
  PORT_RDY_set_inputs = false;
  PORT_RDY_get_outputs = false;
  symbol_count = 70u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkMouse::init_symbols_0()
{
  init_symbol(&symbols[0u], "bit_count", SYM_MODULE, &INST_bit_count);
  init_symbol(&symbols[1u], "CAN_FIRE_get_outputs", SYM_DEF, &DEF_CAN_FIRE_get_outputs, 1u);
  init_symbol(&symbols[2u], "CAN_FIRE_RL_bit_counter", SYM_DEF, &DEF_CAN_FIRE_RL_bit_counter, 1u);
  init_symbol(&symbols[3u], "CAN_FIRE_RL_m1_fsm", SYM_DEF, &DEF_CAN_FIRE_RL_m1_fsm, 1u);
  init_symbol(&symbols[4u], "CAN_FIRE_RL_m1_state_rule", SYM_DEF, &DEF_CAN_FIRE_RL_m1_state_rule, 1u);
  init_symbol(&symbols[5u], "CAN_FIRE_RL_m2", SYM_DEF, &DEF_CAN_FIRE_RL_m2, 1u);
  init_symbol(&symbols[6u], "CAN_FIRE_RL_m2_fsm", SYM_DEF, &DEF_CAN_FIRE_RL_m2_fsm, 1u);
  init_symbol(&symbols[7u],
	      "CAN_FIRE_RL_rl_timer_5usec",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_rl_timer_5usec,
	      1u);
  init_symbol(&symbols[8u],
	      "CAN_FIRE_RL_rx_scan_code_rl",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_rx_scan_code_rl,
	      1u);
  init_symbol(&symbols[9u], "CAN_FIRE_RL_sample_ps2", SYM_DEF, &DEF_CAN_FIRE_RL_sample_ps2, 1u);
  init_symbol(&symbols[10u], "CAN_FIRE_RL_shift_reg", SYM_DEF, &DEF_CAN_FIRE_RL_shift_reg, 1u);
  init_symbol(&symbols[11u],
	      "CAN_FIRE_RL_timer_counter_5usec",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_timer_counter_5usec,
	      1u);
  init_symbol(&symbols[12u],
	      "CAN_FIRE_RL_timer_counter_60usec",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_timer_counter_60usec,
	      1u);
  init_symbol(&symbols[13u], "CAN_FIRE_set_inputs", SYM_DEF, &DEF_CAN_FIRE_set_inputs, 1u);
  init_symbol(&symbols[14u], "divide_reg_i", SYM_MODULE, &INST_divide_reg_i);
  init_symbol(&symbols[15u], "EN_set_inputs", SYM_PORT, &PORT_EN_set_inputs, 1u);
  init_symbol(&symbols[16u], "enable_timer_5usec", SYM_MODULE, &INST_enable_timer_5usec);
  init_symbol(&symbols[17u], "enable_timer_60usec", SYM_MODULE, &INST_enable_timer_60usec);
  init_symbol(&symbols[18u], "get_outputs", SYM_PORT, &PORT_get_outputs, 13u);
  init_symbol(&symbols[19u], "m1_next_state", SYM_MODULE, &INST_m1_next_state);
  init_symbol(&symbols[20u], "m1_state", SYM_MODULE, &INST_m1_state);
  init_symbol(&symbols[21u], "m2_next_state", SYM_MODULE, &INST_m2_next_state);
  init_symbol(&symbols[22u], "m2_state", SYM_MODULE, &INST_m2_state);
  init_symbol(&symbols[23u], "ps2_clk_hi_z", SYM_MODULE, &INST_ps2_clk_hi_z);
  init_symbol(&symbols[24u], "ps2_clk_i", SYM_MODULE, &INST_ps2_clk_i);
  init_symbol(&symbols[25u], "ps2_clk_ms", SYM_MODULE, &INST_ps2_clk_ms);
  init_symbol(&symbols[26u], "ps2_clk_s", SYM_MODULE, &INST_ps2_clk_s);
  init_symbol(&symbols[27u], "ps2_data_hi_z", SYM_MODULE, &INST_ps2_data_hi_z);
  init_symbol(&symbols[28u], "ps2_data_i", SYM_MODULE, &INST_ps2_data_i);
  init_symbol(&symbols[29u], "ps2_data_ms", SYM_MODULE, &INST_ps2_data_ms);
  init_symbol(&symbols[30u], "ps2_data_s", SYM_MODULE, &INST_ps2_data_s);
  init_symbol(&symbols[31u], "q", SYM_MODULE, &INST_q);
  init_symbol(&symbols[32u], "RDY_get_outputs", SYM_PORT, &PORT_RDY_get_outputs, 1u);
  init_symbol(&symbols[33u], "RDY_set_inputs", SYM_PORT, &PORT_RDY_set_inputs, 1u);
  init_symbol(&symbols[34u], "RL_bit_counter", SYM_RULE);
  init_symbol(&symbols[35u], "RL_m1_fsm", SYM_RULE);
  init_symbol(&symbols[36u], "RL_m1_state_rule", SYM_RULE);
  init_symbol(&symbols[37u], "RL_m2", SYM_RULE);
  init_symbol(&symbols[38u], "RL_m2_fsm", SYM_RULE);
  init_symbol(&symbols[39u], "RL_rl_timer_5usec", SYM_RULE);
  init_symbol(&symbols[40u], "RL_rx_scan_code_rl", SYM_RULE);
  init_symbol(&symbols[41u], "RL_sample_ps2", SYM_RULE);
  init_symbol(&symbols[42u], "RL_shift_reg", SYM_RULE);
  init_symbol(&symbols[43u], "RL_timer_counter_5usec", SYM_RULE);
  init_symbol(&symbols[44u], "RL_timer_counter_60usec", SYM_RULE);
  init_symbol(&symbols[45u], "reset", SYM_MODULE, &INST_reset);
  init_symbol(&symbols[46u], "rx_data_ready", SYM_MODULE, &INST_rx_data_ready);
  init_symbol(&symbols[47u], "rx_read", SYM_MODULE, &INST_rx_read);
  init_symbol(&symbols[48u], "rx_released", SYM_MODULE, &INST_rx_released);
  init_symbol(&symbols[49u], "rx_scan_code", SYM_MODULE, &INST_rx_scan_code);
  init_symbol(&symbols[50u], "set_inputs_inputs", SYM_PORT, &PORT_set_inputs_inputs, 21u);
  init_symbol(&symbols[51u], "timer_5usec", SYM_MODULE, &INST_timer_5usec);
  init_symbol(&symbols[52u], "timer_5usec_count", SYM_MODULE, &INST_timer_5usec_count);
  init_symbol(&symbols[53u], "timer_60usec_count", SYM_MODULE, &INST_timer_60usec_count);
  init_symbol(&symbols[54u], "timer_done", SYM_MODULE, &INST_timer_done);
  init_symbol(&symbols[55u], "tx_data", SYM_MODULE, &INST_tx_data);
  init_symbol(&symbols[56u], "tx_error_no_ack", SYM_MODULE, &INST_tx_error_no_ack);
  init_symbol(&symbols[57u], "tx_write", SYM_MODULE, &INST_tx_write);
  init_symbol(&symbols[58u], "WILL_FIRE_RL_bit_counter", SYM_DEF, &DEF_WILL_FIRE_RL_bit_counter, 1u);
  init_symbol(&symbols[59u], "WILL_FIRE_RL_m1_fsm", SYM_DEF, &DEF_WILL_FIRE_RL_m1_fsm, 1u);
  init_symbol(&symbols[60u],
	      "WILL_FIRE_RL_m1_state_rule",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_m1_state_rule,
	      1u);
  init_symbol(&symbols[61u], "WILL_FIRE_RL_m2", SYM_DEF, &DEF_WILL_FIRE_RL_m2, 1u);
  init_symbol(&symbols[62u], "WILL_FIRE_RL_m2_fsm", SYM_DEF, &DEF_WILL_FIRE_RL_m2_fsm, 1u);
  init_symbol(&symbols[63u],
	      "WILL_FIRE_RL_rl_timer_5usec",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_rl_timer_5usec,
	      1u);
  init_symbol(&symbols[64u],
	      "WILL_FIRE_RL_rx_scan_code_rl",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_rx_scan_code_rl,
	      1u);
  init_symbol(&symbols[65u], "WILL_FIRE_RL_sample_ps2", SYM_DEF, &DEF_WILL_FIRE_RL_sample_ps2, 1u);
  init_symbol(&symbols[66u], "WILL_FIRE_RL_shift_reg", SYM_DEF, &DEF_WILL_FIRE_RL_shift_reg, 1u);
  init_symbol(&symbols[67u],
	      "WILL_FIRE_RL_timer_counter_5usec",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_timer_counter_5usec,
	      1u);
  init_symbol(&symbols[68u],
	      "WILL_FIRE_RL_timer_counter_60usec",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_timer_counter_60usec,
	      1u);
  init_symbol(&symbols[69u], "WILL_FIRE_set_inputs", SYM_DEF, &DEF_WILL_FIRE_set_inputs, 1u);
}


/* Rule actions */

void MOD_mkMouse::RL_sample_ps2()
{
  tUInt8 DEF_ps2_clk_i__h1007;
  tUInt8 DEF_x__h1019;
  tUInt8 DEF_ps2_clk_ms__h1072;
  tUInt8 DEF_x__h1077;
  DEF_x__h1077 = INST_ps2_data_ms.METH_read();
  DEF_ps2_clk_ms__h1072 = INST_ps2_clk_ms.METH_read();
  DEF_x__h1019 = INST_ps2_data_i.METH_read();
  DEF_ps2_clk_i__h1007 = INST_ps2_clk_i.METH_read();
  INST_ps2_clk_ms.METH_write(DEF_ps2_clk_i__h1007);
  INST_ps2_data_ms.METH_write(DEF_x__h1019);
  INST_ps2_clk_s.METH_write(DEF_ps2_clk_ms__h1072);
  INST_ps2_data_s.METH_write(DEF_x__h1077);
}

void MOD_mkMouse::RL_m1_state_rule()
{
  tUInt8 DEF_IF_reset_THEN_1_ELSE_m1_next_state___d7;
  tUInt8 DEF_m1_next_state__h1102;
  DEF_reset__h1087 = INST_reset.METH_read();
  DEF_m1_next_state__h1102 = INST_m1_next_state.METH_read();
  DEF_IF_reset_THEN_1_ELSE_m1_next_state___d7 = DEF_reset__h1087 ? (tUInt8)1u : DEF_m1_next_state__h1102;
  INST_m1_state.METH_write(DEF_IF_reset_THEN_1_ELSE_m1_next_state___d7);
}

void MOD_mkMouse::RL_m1_fsm()
{
  tUInt8 DEF_NOT_m1_state_EQ_13_0___d20;
  tUInt8 DEF_NOT_m1_state_EQ_14_1___d21;
  tUInt8 DEF_NOT_m1_state_EQ_12_3___d22;
  tUInt8 DEF_NOT_ps2_clk_s_7___d36;
  tUInt8 DEF_NOT_m1_state_EQ_3_4___d85;
  tUInt8 DEF_NOT_m1_state_EQ_0_2___d84;
  tUInt8 DEF_NOT_m1_state_EQ_1_3_AND_NOT_m1_state_EQ_13_0_0_ETC___d103;
  tUInt8 DEF_NOT_m1_state_EQ_1___d83;
  tUInt8 DEF_NOT_m1_state_EQ_1_3_AND_NOT_m1_state_EQ_13_0_0_ETC___d92;
  tUInt8 DEF_NOT_m1_state_EQ_10_5_04_AND_NOT_m1_state_EQ_11_ETC___d109;
  tUInt8 DEF_m1_state_EQ_1_OR_NOT_m1_state_EQ_13_0_0_AND_NO_ETC___d25;
  tUInt8 DEF_m1_state_EQ_1_OR_m1_state_EQ_13_0_OR_m1_state__ETC___d19;
  tUInt8 DEF_m1_state_EQ_12___d13;
  tUInt8 DEF_m1_state_EQ_14___d11;
  tUInt8 DEF_IF_m1_state_EQ_1_THEN_IF_tx_write_6_THEN_12_EL_ETC___d82;
  tUInt8 DEF_m1_state_EQ_3___d14;
  tUInt8 DEF_ps2_clk_s_7_AND_ps2_data_s_7___d64;
  tUInt8 DEF_m1_state_EQ_8___d66;
  tUInt8 DEF_m1_state_EQ_2___d45;
  tUInt8 DEF_m1_state_EQ_11___d43;
  tUInt8 DEF_m1_state_EQ_10___d35;
  tUInt8 DEF_x__h1973;
  DEF__read__h421 = INST_bit_count.METH_read();
  DEF_m1_state__h1130 = INST_m1_state.METH_read();
  DEF_ps2_data_s__h2093 = INST_ps2_data_s.METH_read();
  DEF__read__h519 = INST_timer_60usec_count.METH_read();
  DEF_x__h2861 = INST_timer_5usec_count.METH_read();
  DEF_q__h2907 = INST_q.METH_read();
  DEF__read__h953 = INST_divide_reg_i.METH_read();
  DEF_ps2_clk_s__h1243 = INST_ps2_clk_s.METH_read();
  DEF_tx_write__h1774 = INST_tx_write.METH_read();
  DEF_x__h1973 = (tUInt8)((tUInt8)1u & DEF_q__h2907);
  DEF_m1_state_EQ_10___d35 = DEF_m1_state__h1130 == (tUInt8)10u;
  DEF_m1_state_EQ_11___d43 = DEF_m1_state__h1130 == (tUInt8)11u;
  DEF_m1_state_EQ_9___d48 = DEF_m1_state__h1130 == (tUInt8)9u;
  DEF_m1_state_EQ_2___d45 = DEF_m1_state__h1130 == (tUInt8)2u;
  DEF_m1_state_EQ_8___d66 = DEF_m1_state__h1130 == (tUInt8)8u;
  DEF_timer_60usec_count_2_EQ_2950___d33 = DEF__read__h519 == 2950u;
  DEF_ps2_clk_s_7_AND_ps2_data_s_7___d64 = DEF_ps2_clk_s__h1243 && DEF_ps2_data_s__h2093;
  DEF_m1_state_EQ_3___d14 = DEF_m1_state__h1130 == (tUInt8)3u;
  DEF_m1_state_EQ_13___d10 = DEF_m1_state__h1130 == (tUInt8)13u;
  DEF_m1_state_EQ_1___d9 = DEF_m1_state__h1130 == (tUInt8)1u;
  DEF_m1_state_EQ_14___d11 = DEF_m1_state__h1130 == (tUInt8)14u;
  DEF_m1_state_EQ_12___d13 = DEF_m1_state__h1130 == (tUInt8)12u;
  DEF_m1_state_EQ_0___d12 = DEF_m1_state__h1130 == (tUInt8)0u;
  DEF_timer_5usec_count_7_EQ_divide_reg_i_8_MINUS_1_9___d40 = DEF_x__h2861 == ((tUInt8)255u & (DEF__read__h953 - (tUInt8)1u));
  DEF_m1_state_EQ_1_OR_m1_state_EQ_13_0_OR_m1_state__ETC___d19 = DEF_m1_state_EQ_1___d9 || (DEF_m1_state_EQ_13___d10 || (DEF_m1_state_EQ_14___d11 || (DEF_m1_state_EQ_0___d12 || (DEF_m1_state_EQ_12___d13 || DEF_m1_state_EQ_3___d14))));
  DEF_NOT_m1_state_EQ_10_5_04_AND_NOT_m1_state_EQ_11_ETC___d109 = !DEF_m1_state_EQ_10___d35 && (!DEF_m1_state_EQ_11___d43 && DEF_x__h1973);
  DEF_NOT_m1_state_EQ_1___d83 = !DEF_m1_state_EQ_1___d9;
  DEF_NOT_m1_state_EQ_0_2___d84 = !DEF_m1_state_EQ_0___d12;
  DEF_NOT_m1_state_EQ_3_4___d85 = !DEF_m1_state_EQ_3___d14;
  DEF_NOT_ps2_clk_s_7___d36 = !DEF_ps2_clk_s__h1243;
  switch (DEF_m1_state__h1130) {
  case (tUInt8)1u:
    DEF_IF_m1_state_EQ_1_THEN_IF_tx_write_6_THEN_12_EL_ETC___d82 = DEF_tx_write__h1774 ? (tUInt8)12u : (DEF_ps2_clk_s__h1243 ? (tUInt8)1u : (tUInt8)13u);
    break;
  case (tUInt8)13u:
    DEF_IF_m1_state_EQ_1_THEN_IF_tx_write_6_THEN_12_EL_ETC___d82 = (tUInt8)0u;
    break;
  case (tUInt8)0u:
    DEF_IF_m1_state_EQ_1_THEN_IF_tx_write_6_THEN_12_EL_ETC___d82 = DEF_tx_write__h1774 ? (tUInt8)12u : (DEF_ps2_clk_s__h1243 ? (tUInt8)14u : (tUInt8)0u);
    break;
  case (tUInt8)12u:
    DEF_IF_m1_state_EQ_1_THEN_IF_tx_write_6_THEN_12_EL_ETC___d82 = (tUInt8)3u;
    break;
  case (tUInt8)3u:
    DEF_IF_m1_state_EQ_1_THEN_IF_tx_write_6_THEN_12_EL_ETC___d82 = DEF_timer_60usec_count_2_EQ_2950___d33 ? (tUInt8)10u : (tUInt8)3u;
    break;
  case (tUInt8)10u:
    DEF_IF_m1_state_EQ_1_THEN_IF_tx_write_6_THEN_12_EL_ETC___d82 = DEF_NOT_ps2_clk_s_7___d36 && DEF_timer_5usec_count_7_EQ_divide_reg_i_8_MINUS_1_9___d40 ? (tUInt8)5u : (tUInt8)10u;
    break;
  case (tUInt8)11u:
    DEF_IF_m1_state_EQ_1_THEN_IF_tx_write_6_THEN_12_EL_ETC___d82 = DEF_ps2_clk_s__h1243 ? (tUInt8)11u : (tUInt8)5u;
    break;
  case (tUInt8)2u:
    DEF_IF_m1_state_EQ_1_THEN_IF_tx_write_6_THEN_12_EL_ETC___d82 = DEF_ps2_clk_s__h1243 && DEF_timer_5usec_count_7_EQ_divide_reg_i_8_MINUS_1_9___d40 ? (tUInt8)9u : (tUInt8)2u;
    break;
  case (tUInt8)9u:
    DEF_IF_m1_state_EQ_1_THEN_IF_tx_write_6_THEN_12_EL_ETC___d82 = (tUInt8)4u;
    break;
  case (tUInt8)4u:
    DEF_IF_m1_state_EQ_1_THEN_IF_tx_write_6_THEN_12_EL_ETC___d82 = DEF__read__h421 == (tUInt8)10u ? (tUInt8)6u : (DEF_ps2_clk_s__h1243 ? (tUInt8)4u : (tUInt8)5u);
    break;
  case (tUInt8)5u:
    DEF_IF_m1_state_EQ_1_THEN_IF_tx_write_6_THEN_12_EL_ETC___d82 = DEF_ps2_clk_s__h1243 ? (tUInt8)2u : (tUInt8)5u;
    break;
  case (tUInt8)6u:
    DEF_IF_m1_state_EQ_1_THEN_IF_tx_write_6_THEN_12_EL_ETC___d82 = DEF_NOT_ps2_clk_s_7___d36 && DEF_ps2_data_s__h2093 ? (tUInt8)8u : (DEF_NOT_ps2_clk_s_7___d36 && !DEF_ps2_data_s__h2093 ? (tUInt8)7u : (tUInt8)6u);
    break;
  case (tUInt8)7u:
    DEF_IF_m1_state_EQ_1_THEN_IF_tx_write_6_THEN_12_EL_ETC___d82 = DEF_ps2_clk_s_7_AND_ps2_data_s_7___d64 ? (tUInt8)1u : (tUInt8)7u;
    break;
  case (tUInt8)8u:
    DEF_IF_m1_state_EQ_1_THEN_IF_tx_write_6_THEN_12_EL_ETC___d82 = DEF_ps2_clk_s_7_AND_ps2_data_s_7___d64 ? (tUInt8)1u : (tUInt8)8u;
    break;
  default:
    DEF_IF_m1_state_EQ_1_THEN_IF_tx_write_6_THEN_12_EL_ETC___d82 = (tUInt8)1u;
  }
  DEF_NOT_m1_state_EQ_12_3___d22 = !DEF_m1_state_EQ_12___d13;
  DEF_NOT_m1_state_EQ_14_1___d21 = !DEF_m1_state_EQ_14___d11;
  DEF_NOT_m1_state_EQ_13_0___d20 = !DEF_m1_state_EQ_13___d10;
  DEF_m1_state_EQ_1_OR_NOT_m1_state_EQ_13_0_0_AND_NO_ETC___d25 = DEF_m1_state_EQ_1___d9 || (DEF_NOT_m1_state_EQ_13_0___d20 && (DEF_NOT_m1_state_EQ_14_1___d21 && DEF_NOT_m1_state_EQ_12_3___d22));
  DEF_NOT_m1_state_EQ_1_3_AND_NOT_m1_state_EQ_13_0_0_ETC___d92 = DEF_NOT_m1_state_EQ_1___d83 && (DEF_NOT_m1_state_EQ_13_0___d20 && (DEF_NOT_m1_state_EQ_14_1___d21 && (DEF_NOT_m1_state_EQ_0_2___d84 && (DEF_NOT_m1_state_EQ_12_3___d22 && (DEF_NOT_m1_state_EQ_3_4___d85 && (DEF_m1_state_EQ_10___d35 || DEF_m1_state_EQ_2___d45))))));
  DEF_NOT_m1_state_EQ_1_3_AND_NOT_m1_state_EQ_13_0_0_ETC___d103 = DEF_NOT_m1_state_EQ_1___d83 && (DEF_NOT_m1_state_EQ_13_0___d20 && (DEF_NOT_m1_state_EQ_14_1___d21 && (DEF_NOT_m1_state_EQ_0_2___d84 && (DEF_NOT_m1_state_EQ_12_3___d22 && (DEF_NOT_m1_state_EQ_3_4___d85 && (DEF_m1_state_EQ_10___d35 || (DEF_m1_state_EQ_11___d43 || (DEF_m1_state_EQ_2___d45 || (DEF_m1_state_EQ_9___d48 || (DEF_m1_state__h1130 == (tUInt8)4u || DEF_m1_state__h1130 == (tUInt8)5u))))))))));
  if (DEF_m1_state_EQ_1_OR_m1_state_EQ_13_0_OR_m1_state__ETC___d19)
    INST_enable_timer_60usec.METH_write(DEF_m1_state_EQ_1_OR_NOT_m1_state_EQ_13_0_0_AND_NO_ETC___d25);
  INST_m1_next_state.METH_write(DEF_IF_m1_state_EQ_1_THEN_IF_tx_write_6_THEN_12_EL_ETC___d82);
  if (DEF_m1_state_EQ_3___d14)
    INST_ps2_clk_hi_z.METH_write((tUInt8)0u);
  if (DEF_NOT_m1_state_EQ_1_3_AND_NOT_m1_state_EQ_13_0_0_ETC___d92)
    INST_enable_timer_5usec.METH_write((tUInt8)1u);
  if (DEF_NOT_m1_state_EQ_1_3_AND_NOT_m1_state_EQ_13_0_0_ETC___d103)
    INST_ps2_data_hi_z.METH_write(DEF_NOT_m1_state_EQ_10_5_04_AND_NOT_m1_state_EQ_11_ETC___d109);
  if (DEF_m1_state_EQ_8___d66)
    INST_tx_error_no_ack.METH_write((tUInt8)1u);
}

void MOD_mkMouse::RL_m2()
{
  tUInt8 DEF_NOT_reset_10_AND_m2_next_state_11___d112;
  tUInt8 DEF_m2_next_state__h2143;
  DEF_reset__h1087 = INST_reset.METH_read();
  DEF_m2_next_state__h2143 = INST_m2_next_state.METH_read();
  DEF_NOT_reset___d110 = !DEF_reset__h1087;
  DEF_NOT_reset_10_AND_m2_next_state_11___d112 = DEF_NOT_reset___d110 && DEF_m2_next_state__h2143;
  INST_m2_state.METH_write(DEF_NOT_reset_10_AND_m2_next_state_11___d112);
}

void MOD_mkMouse::RL_m2_fsm()
{
  tUInt8 DEF_IF_m2_state_13_THEN_NOT_rx_read_14_15_ELSE_bit_ETC___d117;
  tUInt8 DEF_rx_read__h2256;
  tUInt8 DEF_m2_state__h2169;
  DEF__read__h421 = INST_bit_count.METH_read();
  DEF_m2_state__h2169 = INST_m2_state.METH_read();
  DEF_rx_read__h2256 = INST_rx_read.METH_read();
  DEF_bit_count_0_EQ_11___d116 = DEF__read__h421 == (tUInt8)11u;
  DEF_IF_m2_state_13_THEN_NOT_rx_read_14_15_ELSE_bit_ETC___d117 = DEF_m2_state__h2169 ? !DEF_rx_read__h2256 : DEF_bit_count_0_EQ_11___d116;
  INST_rx_data_ready.METH_write(DEF_m2_state__h2169);
  INST_m2_next_state.METH_write(DEF_IF_m2_state_13_THEN_NOT_rx_read_14_15_ELSE_bit_ETC___d117);
}

void MOD_mkMouse::RL_bit_counter()
{
  tUInt8 DEF_x__h2310;
  tUInt8 DEF_IF_reset_OR_bit_count_0_EQ_11_16_18_OR_m1_stat_ETC___d126;
  tUInt8 DEF_reset_OR_bit_count_0_EQ_11_16_18_OR_m1_state_E_ETC___d122;
  tUInt8 DEF_reset_OR_bit_count_0_EQ_11_16_18_OR_m1_state_E_ETC___d124;
  DEF__read__h421 = INST_bit_count.METH_read();
  DEF_reset__h1087 = INST_reset.METH_read();
  DEF_m1_state__h1130 = INST_m1_state.METH_read();
  DEF__read__h519 = INST_timer_60usec_count.METH_read();
  DEF_ps2_clk_s__h1243 = INST_ps2_clk_s.METH_read();
  DEF_x__h2310 = (tUInt8)15u & (DEF__read__h421 + (tUInt8)1u);
  DEF_m1_state_EQ_1___d9 = DEF_m1_state__h1130 == (tUInt8)1u;
  DEF_m1_state_EQ_9___d48 = DEF_m1_state__h1130 == (tUInt8)9u;
  DEF_timer_60usec_count_2_EQ_2950___d33 = DEF__read__h519 == 2950u;
  DEF_m1_state_EQ_13___d10 = DEF_m1_state__h1130 == (tUInt8)13u;
  DEF_m1_state_EQ_13_0_OR_m1_state_EQ_9_8___d123 = DEF_m1_state_EQ_13___d10 || DEF_m1_state_EQ_9___d48;
  DEF_bit_count_0_EQ_11___d116 = DEF__read__h421 == (tUInt8)11u;
  DEF_reset_OR_bit_count_0_EQ_11_16___d118 = DEF_reset__h1087 || DEF_bit_count_0_EQ_11___d116;
  DEF_reset_OR_bit_count_0_EQ_11_16_18_OR_m1_state_E_ETC___d122 = (DEF_reset_OR_bit_count_0_EQ_11_16___d118 || DEF_m1_state__h1130 == (tUInt8)6u) || ((DEF_timer_60usec_count_2_EQ_2950___d33 && DEF_m1_state_EQ_1___d9) && DEF_ps2_clk_s__h1243);
  DEF_reset_OR_bit_count_0_EQ_11_16_18_OR_m1_state_E_ETC___d124 = DEF_reset_OR_bit_count_0_EQ_11_16_18_OR_m1_state_E_ETC___d122 || DEF_m1_state_EQ_13_0_OR_m1_state_EQ_9_8___d123;
  DEF_IF_reset_OR_bit_count_0_EQ_11_16_18_OR_m1_stat_ETC___d126 = DEF_reset_OR_bit_count_0_EQ_11_16_18_OR_m1_state_E_ETC___d122 ? (tUInt8)0u : DEF_x__h2310;
  if (DEF_reset_OR_bit_count_0_EQ_11_16_18_OR_m1_state_E_ETC___d124)
    INST_bit_count.METH_write(DEF_IF_reset_OR_bit_count_0_EQ_11_16_18_OR_m1_stat_ETC___d126);
}

void MOD_mkMouse::RL_shift_reg()
{
  tUInt8 DEF_z__h2419;
  tUInt8 DEF_z__h2426;
  tUInt8 DEF_z__h2433;
  tUInt8 DEF_z__h2440;
  tUInt8 DEF_z__h2447;
  tUInt8 DEF_z__h2454;
  tUInt8 DEF_z__h2461;
  tUInt8 DEF_tx_write_6_AND_m1_state_EQ_1_OR_m1_state_EQ_0__ETC___d128;
  tUInt32 DEF_IF_reset_THEN_0_ELSE_tx_write_6_AND_m1_state_E_ETC___d154;
  tUInt8 DEF_z__h2412;
  tUInt8 DEF_y__h2472;
  tUInt8 DEF_y__h2471;
  tUInt8 DEF_y__h2470;
  tUInt8 DEF_y__h2469;
  tUInt8 DEF_y__h2468;
  tUInt8 DEF_y__h2467;
  tUInt8 DEF_y__h2466;
  tUInt8 DEF_tx_data__h2641;
  tUInt8 DEF_tx_parity_bit__h2334;
  tUInt8 DEF_reset_OR_tx_write_6_AND_m1_state_EQ_1_OR_m1_st_ETC___d130;
  DEF_reset__h1087 = INST_reset.METH_read();
  DEF_m1_state__h1130 = INST_m1_state.METH_read();
  DEF_ps2_data_s__h2093 = INST_ps2_data_s.METH_read();
  DEF_q__h2907 = INST_q.METH_read();
  DEF_tx_data__h2641 = INST_tx_data.METH_read();
  DEF_tx_write__h1774 = INST_tx_write.METH_read();
  DEF_y__h2466 = (tUInt8)(DEF_tx_data__h2641 >> 7u);
  DEF_y__h2467 = (tUInt8)((tUInt8)1u & (DEF_tx_data__h2641 >> 6u));
  DEF_y__h2468 = (tUInt8)((tUInt8)1u & (DEF_tx_data__h2641 >> 5u));
  DEF_y__h2470 = (tUInt8)((tUInt8)1u & (DEF_tx_data__h2641 >> 3u));
  DEF_y__h2469 = (tUInt8)((tUInt8)1u & (DEF_tx_data__h2641 >> 4u));
  DEF_y__h2471 = (tUInt8)((tUInt8)1u & (DEF_tx_data__h2641 >> 2u));
  DEF_y__h2472 = (tUInt8)((tUInt8)1u & (DEF_tx_data__h2641 >> 1u));
  DEF_z__h2412 = (tUInt8)((tUInt8)1u & DEF_tx_data__h2641);
  DEF_m1_state_EQ_9___d48 = DEF_m1_state__h1130 == (tUInt8)9u;
  DEF_m1_state_EQ_1___d9 = DEF_m1_state__h1130 == (tUInt8)1u;
  DEF_m1_state_EQ_13___d10 = DEF_m1_state__h1130 == (tUInt8)13u;
  DEF_m1_state_EQ_13_0_OR_m1_state_EQ_9_8___d123 = DEF_m1_state_EQ_13___d10 || DEF_m1_state_EQ_9___d48;
  DEF_m1_state_EQ_0___d12 = DEF_m1_state__h1130 == (tUInt8)0u;
  DEF_tx_write_6_AND_m1_state_EQ_1_OR_m1_state_EQ_0__ETC___d128 = DEF_tx_write__h1774 && (DEF_m1_state_EQ_1___d9 || DEF_m1_state_EQ_0___d12);
  DEF_reset_OR_tx_write_6_AND_m1_state_EQ_1_OR_m1_st_ETC___d130 = DEF_reset__h1087 || (DEF_tx_write_6_AND_m1_state_EQ_1_OR_m1_state_EQ_0__ETC___d128 || DEF_m1_state_EQ_13_0_OR_m1_state_EQ_9_8___d123);
  DEF_z__h2419 = DEF_z__h2412 ^ DEF_y__h2472;
  DEF_z__h2426 = DEF_z__h2419 ^ DEF_y__h2471;
  DEF_z__h2433 = DEF_z__h2426 ^ DEF_y__h2470;
  DEF_z__h2440 = DEF_z__h2433 ^ DEF_y__h2469;
  DEF_z__h2447 = DEF_z__h2440 ^ DEF_y__h2468;
  DEF_z__h2454 = DEF_z__h2447 ^ DEF_y__h2467;
  DEF_z__h2461 = DEF_z__h2454 ^ DEF_y__h2466;
  DEF_tx_parity_bit__h2334 = (tUInt8)1u & ~DEF_z__h2461;
  DEF_IF_reset_THEN_0_ELSE_tx_write_6_AND_m1_state_E_ETC___d154 = DEF_reset__h1087 ? 0u : 2047u & (((((tUInt32)(DEF_tx_write_6_AND_m1_state_EQ_1_OR_m1_state_EQ_0__ETC___d128 || DEF_ps2_data_s__h2093)) << 10u) | (((tUInt32)(DEF_tx_write_6_AND_m1_state_EQ_1_OR_m1_state_EQ_0__ETC___d128 && DEF_tx_parity_bit__h2334)) << 9u)) | (DEF_tx_write_6_AND_m1_state_EQ_1_OR_m1_state_EQ_0__ETC___d128 ? 511u & ((((tUInt32)(DEF_tx_data__h2641)) << 1u) | (tUInt32)((tUInt8)0u)) : (tUInt32)(511u & (DEF_q__h2907 >> 1u))));
  if (DEF_reset_OR_tx_write_6_AND_m1_state_EQ_1_OR_m1_st_ETC___d130)
    INST_q.METH_write(DEF_IF_reset_THEN_0_ELSE_tx_write_6_AND_m1_state_E_ETC___d154);
}

void MOD_mkMouse::RL_timer_counter_60usec()
{
  tUInt32 DEF_x__h2689;
  tUInt32 DEF_IF_enable_timer_60usec_58_THEN_timer_60usec_co_ETC___d162;
  tUInt8 DEF_timer_done_55_AND_NOT_timer_60usec_count_2_EQ__ETC___d160;
  tUInt8 DEF_timer_done__h2683;
  DEF_timer_done__h2683 = INST_timer_done.METH_read();
  DEF_enable_timer_60usec__h2716 = INST_enable_timer_60usec.METH_read();
  DEF__read__h519 = INST_timer_60usec_count.METH_read();
  DEF_x__h2689 = 4095u & (DEF__read__h519 + 1u);
  DEF_IF_enable_timer_60usec_58_THEN_timer_60usec_co_ETC___d162 = DEF_enable_timer_60usec__h2716 ? DEF_x__h2689 : 0u;
  DEF_timer_60usec_count_2_EQ_2950___d33 = DEF__read__h519 == 2950u;
  DEF_timer_done_55_AND_NOT_timer_60usec_count_2_EQ__ETC___d160 = (DEF_timer_done__h2683 && !DEF_timer_60usec_count_2_EQ_2950___d33) || !DEF_enable_timer_60usec__h2716;
  if (DEF_timer_done_55_AND_NOT_timer_60usec_count_2_EQ__ETC___d160)
    INST_timer_60usec_count.METH_write(DEF_IF_enable_timer_60usec_58_THEN_timer_60usec_co_ETC___d162);
}

void MOD_mkMouse::RL_rl_timer_5usec()
{
  tUInt8 DEF_NOT_reset_10_AND_enable_timer_60usec_58___d169;
  tUInt8 DEF_IF_reset_THEN_1_ELSE_IF_enable_timer_60usec_58_ETC___d168;
  tUInt8 DEF_x__h2773;
  tUInt8 DEF_timer_5usec_63_EQ_divide_reg_i_8___d164;
  tUInt8 DEF_x__h2807;
  DEF_enable_timer_60usec__h2716 = INST_enable_timer_60usec.METH_read();
  DEF_reset__h1087 = INST_reset.METH_read();
  DEF_x__h2807 = INST_timer_5usec.METH_read();
  DEF__read__h953 = INST_divide_reg_i.METH_read();
  DEF_timer_5usec_63_EQ_divide_reg_i_8___d164 = DEF_x__h2807 == DEF__read__h953;
  DEF_x__h2773 = (tUInt8)255u & (DEF_x__h2807 + (tUInt8)1u);
  DEF_IF_reset_THEN_1_ELSE_IF_enable_timer_60usec_58_ETC___d168 = DEF_reset__h1087 ? (tUInt8)1u : (DEF_enable_timer_60usec__h2716 ? (DEF_timer_5usec_63_EQ_divide_reg_i_8___d164 ? (tUInt8)1u : DEF_x__h2773) : (tUInt8)1u);
  DEF_NOT_reset___d110 = !DEF_reset__h1087;
  DEF_NOT_reset_10_AND_enable_timer_60usec_58___d169 = DEF_NOT_reset___d110 && DEF_enable_timer_60usec__h2716;
  INST_timer_5usec.METH_write(DEF_IF_reset_THEN_1_ELSE_IF_enable_timer_60usec_58_ETC___d168);
  if (DEF_NOT_reset_10_AND_enable_timer_60usec_58___d169)
    INST_timer_done.METH_write(DEF_timer_5usec_63_EQ_divide_reg_i_8___d164);
}

void MOD_mkMouse::RL_timer_counter_5usec()
{
  tUInt8 DEF_x__h2845;
  tUInt8 DEF_IF_enable_timer_5usec_71_THEN_timer_5usec_coun_ETC___d175;
  tUInt8 DEF_NOT_timer_5usec_count_7_EQ_divide_reg_i_8_MINU_ETC___d173;
  tUInt8 DEF_enable_timer_5usec__h2835;
  DEF_enable_timer_5usec__h2835 = INST_enable_timer_5usec.METH_read();
  DEF_x__h2861 = INST_timer_5usec_count.METH_read();
  DEF__read__h953 = INST_divide_reg_i.METH_read();
  DEF_x__h2845 = (tUInt8)255u & (DEF_x__h2861 + (tUInt8)1u);
  DEF_IF_enable_timer_5usec_71_THEN_timer_5usec_coun_ETC___d175 = DEF_enable_timer_5usec__h2835 ? DEF_x__h2845 : (tUInt8)0u;
  DEF_timer_5usec_count_7_EQ_divide_reg_i_8_MINUS_1_9___d40 = DEF_x__h2861 == ((tUInt8)255u & (DEF__read__h953 - (tUInt8)1u));
  DEF_NOT_timer_5usec_count_7_EQ_divide_reg_i_8_MINU_ETC___d173 = !DEF_timer_5usec_count_7_EQ_divide_reg_i_8_MINUS_1_9___d40 || !DEF_enable_timer_5usec__h2835;
  if (DEF_NOT_timer_5usec_count_7_EQ_divide_reg_i_8_MINU_ETC___d173)
    INST_timer_5usec_count.METH_write(DEF_IF_enable_timer_5usec_71_THEN_timer_5usec_coun_ETC___d175);
}

void MOD_mkMouse::RL_rx_scan_code_rl()
{
  tUInt8 DEF_IF_reset_THEN_0_ELSE_q_06_BITS_8_TO_1_76___d177;
  tUInt8 DEF_x__h2871;
  DEF__read__h421 = INST_bit_count.METH_read();
  DEF_reset__h1087 = INST_reset.METH_read();
  DEF_q__h2907 = INST_q.METH_read();
  DEF_x__h2871 = (tUInt8)((tUInt8)255u & (DEF_q__h2907 >> 1u));
  DEF_IF_reset_THEN_0_ELSE_q_06_BITS_8_TO_1_76___d177 = DEF_reset__h1087 ? (tUInt8)0u : DEF_x__h2871;
  DEF_bit_count_0_EQ_11___d116 = DEF__read__h421 == (tUInt8)11u;
  DEF_reset_OR_bit_count_0_EQ_11_16___d118 = DEF_reset__h1087 || DEF_bit_count_0_EQ_11___d116;
  if (DEF_reset_OR_bit_count_0_EQ_11_16___d118)
    INST_rx_scan_code.METH_write(DEF_IF_reset_THEN_0_ELSE_q_06_BITS_8_TO_1_76___d177);
}


/* Methods */

void MOD_mkMouse::METH_set_inputs(tUInt32 ARG_set_inputs_inputs)
{
  tUInt8 DEF_set_inputs_inputs_BIT_8___d183;
  tUInt8 DEF_set_inputs_inputs_BIT_17___d181;
  tUInt8 DEF_x__h3024;
  tUInt8 DEF_set_inputs_inputs_BIT_19___d179;
  tUInt8 DEF_set_inputs_inputs_BIT_20___d178;
  tUInt8 DEF_x__h3153;
  tUInt8 DEF_x__h3093;
  PORT_EN_set_inputs = (tUInt8)1u;
  DEF_WILL_FIRE_set_inputs = (tUInt8)1u;
  PORT_set_inputs_inputs = ARG_set_inputs_inputs;
  DEF_x__h3093 = (tUInt8)((tUInt8)255u & (ARG_set_inputs_inputs >> 9u));
  DEF_x__h3153 = (tUInt8)((tUInt8)255u & ARG_set_inputs_inputs);
  DEF_set_inputs_inputs_BIT_20___d178 = (tUInt8)(ARG_set_inputs_inputs >> 20u);
  DEF_set_inputs_inputs_BIT_19___d179 = (tUInt8)((tUInt8)1u & (ARG_set_inputs_inputs >> 19u));
  DEF_x__h3024 = (tUInt8)((tUInt8)1u & (ARG_set_inputs_inputs >> 18u));
  DEF_set_inputs_inputs_BIT_8___d183 = (tUInt8)((tUInt8)1u & (ARG_set_inputs_inputs >> 8u));
  DEF_set_inputs_inputs_BIT_17___d181 = (tUInt8)((tUInt8)1u & (ARG_set_inputs_inputs >> 17u));
  INST_reset.METH_write(DEF_set_inputs_inputs_BIT_20___d178);
  INST_ps2_clk_i.METH_write(DEF_set_inputs_inputs_BIT_19___d179);
  INST_ps2_data_i.METH_write(DEF_x__h3024);
  INST_rx_read.METH_write(DEF_set_inputs_inputs_BIT_17___d181);
  INST_tx_data.METH_write(DEF_x__h3093);
  INST_divide_reg_i.METH_write(DEF_x__h3153);
  INST_tx_write.METH_write(DEF_set_inputs_inputs_BIT_8___d183);
}

tUInt8 MOD_mkMouse::METH_RDY_set_inputs()
{
  DEF_CAN_FIRE_set_inputs = (tUInt8)1u;
  PORT_RDY_set_inputs = DEF_CAN_FIRE_set_inputs;
  return PORT_RDY_set_inputs;
}

tUInt32 MOD_mkMouse::METH_get_outputs()
{
  tUInt32 DEF_rx_scan_code_87_CONCAT_rx_data_ready_88_CONCAT_ETC___d194;
  tUInt8 DEF_x__h3171;
  tUInt8 DEF_x__h3173;
  tUInt8 DEF_x__h3161;
  tUInt8 DEF_x__h3168;
  tUInt8 DEF_get_outputs_rx_scan_code__h3164;
  DEF_m1_state__h1130 = INST_m1_state.METH_read();
  DEF_get_outputs_rx_scan_code__h3164 = INST_rx_scan_code.METH_read();
  DEF_x__h3168 = INST_ps2_data_hi_z.METH_read();
  DEF_x__h3173 = INST_tx_error_no_ack.METH_read();
  DEF_x__h3161 = INST_ps2_clk_hi_z.METH_read();
  DEF_x__h3171 = INST_rx_data_ready.METH_read();
  DEF_tx_write__h1774 = INST_tx_write.METH_read();
  DEF_m1_state_EQ_1___d9 = DEF_m1_state__h1130 == (tUInt8)1u;
  DEF_m1_state_EQ_0___d12 = DEF_m1_state__h1130 == (tUInt8)0u;
  DEF_rx_scan_code_87_CONCAT_rx_data_ready_88_CONCAT_ETC___d194 = 2047u & ((((((tUInt32)(DEF_get_outputs_rx_scan_code__h3164)) << 3u) | (((tUInt32)(DEF_x__h3171)) << 2u)) | (((tUInt32)((DEF_tx_write__h1774 && DEF_m1_state_EQ_1___d9) || (DEF_tx_write__h1774 && DEF_m1_state_EQ_0___d12))) << 1u)) | (tUInt32)(DEF_x__h3173));
  PORT_get_outputs = 8191u & (((((tUInt32)(DEF_x__h3161)) << 12u) | (((tUInt32)(DEF_x__h3168)) << 11u)) | DEF_rx_scan_code_87_CONCAT_rx_data_ready_88_CONCAT_ETC___d194);
  return PORT_get_outputs;
}

tUInt8 MOD_mkMouse::METH_RDY_get_outputs()
{
  DEF_CAN_FIRE_get_outputs = (tUInt8)1u;
  PORT_RDY_get_outputs = DEF_CAN_FIRE_get_outputs;
  return PORT_RDY_get_outputs;
}


/* Reset routines */

void MOD_mkMouse::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_tx_write.reset_RST(ARG_rst_in);
  INST_tx_error_no_ack.reset_RST(ARG_rst_in);
  INST_tx_data.reset_RST(ARG_rst_in);
  INST_timer_done.reset_RST(ARG_rst_in);
  INST_timer_60usec_count.reset_RST(ARG_rst_in);
  INST_timer_5usec_count.reset_RST(ARG_rst_in);
  INST_timer_5usec.reset_RST(ARG_rst_in);
  INST_rx_scan_code.reset_RST(ARG_rst_in);
  INST_rx_released.reset_RST(ARG_rst_in);
  INST_rx_read.reset_RST(ARG_rst_in);
  INST_rx_data_ready.reset_RST(ARG_rst_in);
  INST_reset.reset_RST(ARG_rst_in);
  INST_q.reset_RST(ARG_rst_in);
  INST_ps2_data_s.reset_RST(ARG_rst_in);
  INST_ps2_data_ms.reset_RST(ARG_rst_in);
  INST_ps2_data_i.reset_RST(ARG_rst_in);
  INST_ps2_data_hi_z.reset_RST(ARG_rst_in);
  INST_ps2_clk_s.reset_RST(ARG_rst_in);
  INST_ps2_clk_ms.reset_RST(ARG_rst_in);
  INST_ps2_clk_i.reset_RST(ARG_rst_in);
  INST_ps2_clk_hi_z.reset_RST(ARG_rst_in);
  INST_m2_state.reset_RST(ARG_rst_in);
  INST_m2_next_state.reset_RST(ARG_rst_in);
  INST_m1_state.reset_RST(ARG_rst_in);
  INST_m1_next_state.reset_RST(ARG_rst_in);
  INST_enable_timer_60usec.reset_RST(ARG_rst_in);
  INST_enable_timer_5usec.reset_RST(ARG_rst_in);
  INST_divide_reg_i.reset_RST(ARG_rst_in);
  INST_bit_count.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkMouse::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkMouse::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_bit_count.dump_state(indent + 2u);
  INST_divide_reg_i.dump_state(indent + 2u);
  INST_enable_timer_5usec.dump_state(indent + 2u);
  INST_enable_timer_60usec.dump_state(indent + 2u);
  INST_m1_next_state.dump_state(indent + 2u);
  INST_m1_state.dump_state(indent + 2u);
  INST_m2_next_state.dump_state(indent + 2u);
  INST_m2_state.dump_state(indent + 2u);
  INST_ps2_clk_hi_z.dump_state(indent + 2u);
  INST_ps2_clk_i.dump_state(indent + 2u);
  INST_ps2_clk_ms.dump_state(indent + 2u);
  INST_ps2_clk_s.dump_state(indent + 2u);
  INST_ps2_data_hi_z.dump_state(indent + 2u);
  INST_ps2_data_i.dump_state(indent + 2u);
  INST_ps2_data_ms.dump_state(indent + 2u);
  INST_ps2_data_s.dump_state(indent + 2u);
  INST_q.dump_state(indent + 2u);
  INST_reset.dump_state(indent + 2u);
  INST_rx_data_ready.dump_state(indent + 2u);
  INST_rx_read.dump_state(indent + 2u);
  INST_rx_released.dump_state(indent + 2u);
  INST_rx_scan_code.dump_state(indent + 2u);
  INST_timer_5usec.dump_state(indent + 2u);
  INST_timer_5usec_count.dump_state(indent + 2u);
  INST_timer_60usec_count.dump_state(indent + 2u);
  INST_timer_done.dump_state(indent + 2u);
  INST_tx_data.dump_state(indent + 2u);
  INST_tx_error_no_ack.dump_state(indent + 2u);
  INST_tx_write.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkMouse::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 81u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_bit_counter", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_m1_fsm", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_m1_state_rule", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_m2", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_m2_fsm", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_rl_timer_5usec", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_rx_scan_code_rl", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_sample_ps2", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_shift_reg", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_timer_counter_5usec", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_timer_counter_60usec", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_get_outputs", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_set_inputs", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "NOT_reset___d110", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_bit_counter", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_m1_fsm", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_m1_state_rule", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_m2", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_m2_fsm", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_rl_timer_5usec", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_rx_scan_code_rl", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_sample_ps2", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_shift_reg", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_timer_counter_5usec", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_timer_counter_60usec", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_set_inputs", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "_read__h421", 4u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "_read__h519", 12u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "_read__h953", 8u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "bit_count_0_EQ_11___d116", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "enable_timer_60usec__h2716", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "m1_state_EQ_0___d12", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "m1_state_EQ_13_0_OR_m1_state_EQ_9_8___d123", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "m1_state_EQ_13___d10", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "m1_state_EQ_1___d9", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "m1_state_EQ_9___d48", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "m1_state__h1130", 4u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "ps2_clk_s__h1243", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "ps2_data_s__h2093", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "q__h2907", 11u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "reset_OR_bit_count_0_EQ_11_16___d118", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "reset__h1087", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "timer_5usec_count_7_EQ_divide_reg_i_8_MINUS_1_9___d40", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "timer_60usec_count_2_EQ_2950___d33", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "tx_write__h1774", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h2861", 8u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_set_inputs", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_get_outputs", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_set_inputs", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "get_outputs", 13u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "set_inputs_inputs", 21u);
  num = INST_bit_count.dump_VCD_defs(num);
  num = INST_divide_reg_i.dump_VCD_defs(num);
  num = INST_enable_timer_5usec.dump_VCD_defs(num);
  num = INST_enable_timer_60usec.dump_VCD_defs(num);
  num = INST_m1_next_state.dump_VCD_defs(num);
  num = INST_m1_state.dump_VCD_defs(num);
  num = INST_m2_next_state.dump_VCD_defs(num);
  num = INST_m2_state.dump_VCD_defs(num);
  num = INST_ps2_clk_hi_z.dump_VCD_defs(num);
  num = INST_ps2_clk_i.dump_VCD_defs(num);
  num = INST_ps2_clk_ms.dump_VCD_defs(num);
  num = INST_ps2_clk_s.dump_VCD_defs(num);
  num = INST_ps2_data_hi_z.dump_VCD_defs(num);
  num = INST_ps2_data_i.dump_VCD_defs(num);
  num = INST_ps2_data_ms.dump_VCD_defs(num);
  num = INST_ps2_data_s.dump_VCD_defs(num);
  num = INST_q.dump_VCD_defs(num);
  num = INST_reset.dump_VCD_defs(num);
  num = INST_rx_data_ready.dump_VCD_defs(num);
  num = INST_rx_read.dump_VCD_defs(num);
  num = INST_rx_released.dump_VCD_defs(num);
  num = INST_rx_scan_code.dump_VCD_defs(num);
  num = INST_timer_5usec.dump_VCD_defs(num);
  num = INST_timer_5usec_count.dump_VCD_defs(num);
  num = INST_timer_60usec_count.dump_VCD_defs(num);
  num = INST_timer_done.dump_VCD_defs(num);
  num = INST_tx_data.dump_VCD_defs(num);
  num = INST_tx_error_no_ack.dump_VCD_defs(num);
  num = INST_tx_write.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkMouse::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkMouse &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkMouse::vcd_defs(tVCDDumpType dt, MOD_mkMouse &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 4u);
    vcd_write_x(sim_hdl, num++, 12u);
    vcd_write_x(sim_hdl, num++, 8u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 4u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 11u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 8u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 13u);
    vcd_write_x(sim_hdl, num++, 21u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.DEF_CAN_FIRE_RL_bit_counter) != DEF_CAN_FIRE_RL_bit_counter)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_bit_counter, 1u);
	backing.DEF_CAN_FIRE_RL_bit_counter = DEF_CAN_FIRE_RL_bit_counter;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_m1_fsm) != DEF_CAN_FIRE_RL_m1_fsm)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_m1_fsm, 1u);
	backing.DEF_CAN_FIRE_RL_m1_fsm = DEF_CAN_FIRE_RL_m1_fsm;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_m1_state_rule) != DEF_CAN_FIRE_RL_m1_state_rule)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_m1_state_rule, 1u);
	backing.DEF_CAN_FIRE_RL_m1_state_rule = DEF_CAN_FIRE_RL_m1_state_rule;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_m2) != DEF_CAN_FIRE_RL_m2)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_m2, 1u);
	backing.DEF_CAN_FIRE_RL_m2 = DEF_CAN_FIRE_RL_m2;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_m2_fsm) != DEF_CAN_FIRE_RL_m2_fsm)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_m2_fsm, 1u);
	backing.DEF_CAN_FIRE_RL_m2_fsm = DEF_CAN_FIRE_RL_m2_fsm;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_rl_timer_5usec) != DEF_CAN_FIRE_RL_rl_timer_5usec)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_rl_timer_5usec, 1u);
	backing.DEF_CAN_FIRE_RL_rl_timer_5usec = DEF_CAN_FIRE_RL_rl_timer_5usec;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_rx_scan_code_rl) != DEF_CAN_FIRE_RL_rx_scan_code_rl)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_rx_scan_code_rl, 1u);
	backing.DEF_CAN_FIRE_RL_rx_scan_code_rl = DEF_CAN_FIRE_RL_rx_scan_code_rl;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_sample_ps2) != DEF_CAN_FIRE_RL_sample_ps2)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_sample_ps2, 1u);
	backing.DEF_CAN_FIRE_RL_sample_ps2 = DEF_CAN_FIRE_RL_sample_ps2;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_shift_reg) != DEF_CAN_FIRE_RL_shift_reg)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_shift_reg, 1u);
	backing.DEF_CAN_FIRE_RL_shift_reg = DEF_CAN_FIRE_RL_shift_reg;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_timer_counter_5usec) != DEF_CAN_FIRE_RL_timer_counter_5usec)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_timer_counter_5usec, 1u);
	backing.DEF_CAN_FIRE_RL_timer_counter_5usec = DEF_CAN_FIRE_RL_timer_counter_5usec;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_timer_counter_60usec) != DEF_CAN_FIRE_RL_timer_counter_60usec)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_timer_counter_60usec, 1u);
	backing.DEF_CAN_FIRE_RL_timer_counter_60usec = DEF_CAN_FIRE_RL_timer_counter_60usec;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_get_outputs) != DEF_CAN_FIRE_get_outputs)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_get_outputs, 1u);
	backing.DEF_CAN_FIRE_get_outputs = DEF_CAN_FIRE_get_outputs;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_set_inputs) != DEF_CAN_FIRE_set_inputs)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_set_inputs, 1u);
	backing.DEF_CAN_FIRE_set_inputs = DEF_CAN_FIRE_set_inputs;
      }
      ++num;
      if ((backing.DEF_NOT_reset___d110) != DEF_NOT_reset___d110)
      {
	vcd_write_val(sim_hdl, num, DEF_NOT_reset___d110, 1u);
	backing.DEF_NOT_reset___d110 = DEF_NOT_reset___d110;
      }
      ++num;
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_bit_counter) != DEF_WILL_FIRE_RL_bit_counter)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_bit_counter, 1u);
	backing.DEF_WILL_FIRE_RL_bit_counter = DEF_WILL_FIRE_RL_bit_counter;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_m1_fsm) != DEF_WILL_FIRE_RL_m1_fsm)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_m1_fsm, 1u);
	backing.DEF_WILL_FIRE_RL_m1_fsm = DEF_WILL_FIRE_RL_m1_fsm;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_m1_state_rule) != DEF_WILL_FIRE_RL_m1_state_rule)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_m1_state_rule, 1u);
	backing.DEF_WILL_FIRE_RL_m1_state_rule = DEF_WILL_FIRE_RL_m1_state_rule;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_m2) != DEF_WILL_FIRE_RL_m2)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_m2, 1u);
	backing.DEF_WILL_FIRE_RL_m2 = DEF_WILL_FIRE_RL_m2;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_m2_fsm) != DEF_WILL_FIRE_RL_m2_fsm)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_m2_fsm, 1u);
	backing.DEF_WILL_FIRE_RL_m2_fsm = DEF_WILL_FIRE_RL_m2_fsm;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_rl_timer_5usec) != DEF_WILL_FIRE_RL_rl_timer_5usec)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_rl_timer_5usec, 1u);
	backing.DEF_WILL_FIRE_RL_rl_timer_5usec = DEF_WILL_FIRE_RL_rl_timer_5usec;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_rx_scan_code_rl) != DEF_WILL_FIRE_RL_rx_scan_code_rl)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_rx_scan_code_rl, 1u);
	backing.DEF_WILL_FIRE_RL_rx_scan_code_rl = DEF_WILL_FIRE_RL_rx_scan_code_rl;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_sample_ps2) != DEF_WILL_FIRE_RL_sample_ps2)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_sample_ps2, 1u);
	backing.DEF_WILL_FIRE_RL_sample_ps2 = DEF_WILL_FIRE_RL_sample_ps2;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_shift_reg) != DEF_WILL_FIRE_RL_shift_reg)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_shift_reg, 1u);
	backing.DEF_WILL_FIRE_RL_shift_reg = DEF_WILL_FIRE_RL_shift_reg;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_timer_counter_5usec) != DEF_WILL_FIRE_RL_timer_counter_5usec)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_timer_counter_5usec, 1u);
	backing.DEF_WILL_FIRE_RL_timer_counter_5usec = DEF_WILL_FIRE_RL_timer_counter_5usec;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_timer_counter_60usec) != DEF_WILL_FIRE_RL_timer_counter_60usec)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_timer_counter_60usec, 1u);
	backing.DEF_WILL_FIRE_RL_timer_counter_60usec = DEF_WILL_FIRE_RL_timer_counter_60usec;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_set_inputs) != DEF_WILL_FIRE_set_inputs)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_set_inputs, 1u);
	backing.DEF_WILL_FIRE_set_inputs = DEF_WILL_FIRE_set_inputs;
      }
      ++num;
      if ((backing.DEF__read__h421) != DEF__read__h421)
      {
	vcd_write_val(sim_hdl, num, DEF__read__h421, 4u);
	backing.DEF__read__h421 = DEF__read__h421;
      }
      ++num;
      if ((backing.DEF__read__h519) != DEF__read__h519)
      {
	vcd_write_val(sim_hdl, num, DEF__read__h519, 12u);
	backing.DEF__read__h519 = DEF__read__h519;
      }
      ++num;
      if ((backing.DEF__read__h953) != DEF__read__h953)
      {
	vcd_write_val(sim_hdl, num, DEF__read__h953, 8u);
	backing.DEF__read__h953 = DEF__read__h953;
      }
      ++num;
      if ((backing.DEF_bit_count_0_EQ_11___d116) != DEF_bit_count_0_EQ_11___d116)
      {
	vcd_write_val(sim_hdl, num, DEF_bit_count_0_EQ_11___d116, 1u);
	backing.DEF_bit_count_0_EQ_11___d116 = DEF_bit_count_0_EQ_11___d116;
      }
      ++num;
      if ((backing.DEF_enable_timer_60usec__h2716) != DEF_enable_timer_60usec__h2716)
      {
	vcd_write_val(sim_hdl, num, DEF_enable_timer_60usec__h2716, 1u);
	backing.DEF_enable_timer_60usec__h2716 = DEF_enable_timer_60usec__h2716;
      }
      ++num;
      if ((backing.DEF_m1_state_EQ_0___d12) != DEF_m1_state_EQ_0___d12)
      {
	vcd_write_val(sim_hdl, num, DEF_m1_state_EQ_0___d12, 1u);
	backing.DEF_m1_state_EQ_0___d12 = DEF_m1_state_EQ_0___d12;
      }
      ++num;
      if ((backing.DEF_m1_state_EQ_13_0_OR_m1_state_EQ_9_8___d123) != DEF_m1_state_EQ_13_0_OR_m1_state_EQ_9_8___d123)
      {
	vcd_write_val(sim_hdl, num, DEF_m1_state_EQ_13_0_OR_m1_state_EQ_9_8___d123, 1u);
	backing.DEF_m1_state_EQ_13_0_OR_m1_state_EQ_9_8___d123 = DEF_m1_state_EQ_13_0_OR_m1_state_EQ_9_8___d123;
      }
      ++num;
      if ((backing.DEF_m1_state_EQ_13___d10) != DEF_m1_state_EQ_13___d10)
      {
	vcd_write_val(sim_hdl, num, DEF_m1_state_EQ_13___d10, 1u);
	backing.DEF_m1_state_EQ_13___d10 = DEF_m1_state_EQ_13___d10;
      }
      ++num;
      if ((backing.DEF_m1_state_EQ_1___d9) != DEF_m1_state_EQ_1___d9)
      {
	vcd_write_val(sim_hdl, num, DEF_m1_state_EQ_1___d9, 1u);
	backing.DEF_m1_state_EQ_1___d9 = DEF_m1_state_EQ_1___d9;
      }
      ++num;
      if ((backing.DEF_m1_state_EQ_9___d48) != DEF_m1_state_EQ_9___d48)
      {
	vcd_write_val(sim_hdl, num, DEF_m1_state_EQ_9___d48, 1u);
	backing.DEF_m1_state_EQ_9___d48 = DEF_m1_state_EQ_9___d48;
      }
      ++num;
      if ((backing.DEF_m1_state__h1130) != DEF_m1_state__h1130)
      {
	vcd_write_val(sim_hdl, num, DEF_m1_state__h1130, 4u);
	backing.DEF_m1_state__h1130 = DEF_m1_state__h1130;
      }
      ++num;
      if ((backing.DEF_ps2_clk_s__h1243) != DEF_ps2_clk_s__h1243)
      {
	vcd_write_val(sim_hdl, num, DEF_ps2_clk_s__h1243, 1u);
	backing.DEF_ps2_clk_s__h1243 = DEF_ps2_clk_s__h1243;
      }
      ++num;
      if ((backing.DEF_ps2_data_s__h2093) != DEF_ps2_data_s__h2093)
      {
	vcd_write_val(sim_hdl, num, DEF_ps2_data_s__h2093, 1u);
	backing.DEF_ps2_data_s__h2093 = DEF_ps2_data_s__h2093;
      }
      ++num;
      if ((backing.DEF_q__h2907) != DEF_q__h2907)
      {
	vcd_write_val(sim_hdl, num, DEF_q__h2907, 11u);
	backing.DEF_q__h2907 = DEF_q__h2907;
      }
      ++num;
      if ((backing.DEF_reset_OR_bit_count_0_EQ_11_16___d118) != DEF_reset_OR_bit_count_0_EQ_11_16___d118)
      {
	vcd_write_val(sim_hdl, num, DEF_reset_OR_bit_count_0_EQ_11_16___d118, 1u);
	backing.DEF_reset_OR_bit_count_0_EQ_11_16___d118 = DEF_reset_OR_bit_count_0_EQ_11_16___d118;
      }
      ++num;
      if ((backing.DEF_reset__h1087) != DEF_reset__h1087)
      {
	vcd_write_val(sim_hdl, num, DEF_reset__h1087, 1u);
	backing.DEF_reset__h1087 = DEF_reset__h1087;
      }
      ++num;
      if ((backing.DEF_timer_5usec_count_7_EQ_divide_reg_i_8_MINUS_1_9___d40) != DEF_timer_5usec_count_7_EQ_divide_reg_i_8_MINUS_1_9___d40)
      {
	vcd_write_val(sim_hdl, num, DEF_timer_5usec_count_7_EQ_divide_reg_i_8_MINUS_1_9___d40, 1u);
	backing.DEF_timer_5usec_count_7_EQ_divide_reg_i_8_MINUS_1_9___d40 = DEF_timer_5usec_count_7_EQ_divide_reg_i_8_MINUS_1_9___d40;
      }
      ++num;
      if ((backing.DEF_timer_60usec_count_2_EQ_2950___d33) != DEF_timer_60usec_count_2_EQ_2950___d33)
      {
	vcd_write_val(sim_hdl, num, DEF_timer_60usec_count_2_EQ_2950___d33, 1u);
	backing.DEF_timer_60usec_count_2_EQ_2950___d33 = DEF_timer_60usec_count_2_EQ_2950___d33;
      }
      ++num;
      if ((backing.DEF_tx_write__h1774) != DEF_tx_write__h1774)
      {
	vcd_write_val(sim_hdl, num, DEF_tx_write__h1774, 1u);
	backing.DEF_tx_write__h1774 = DEF_tx_write__h1774;
      }
      ++num;
      if ((backing.DEF_x__h2861) != DEF_x__h2861)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h2861, 8u);
	backing.DEF_x__h2861 = DEF_x__h2861;
      }
      ++num;
      if ((backing.PORT_EN_set_inputs) != PORT_EN_set_inputs)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_set_inputs, 1u);
	backing.PORT_EN_set_inputs = PORT_EN_set_inputs;
      }
      ++num;
      if ((backing.PORT_RDY_get_outputs) != PORT_RDY_get_outputs)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_get_outputs, 1u);
	backing.PORT_RDY_get_outputs = PORT_RDY_get_outputs;
      }
      ++num;
      if ((backing.PORT_RDY_set_inputs) != PORT_RDY_set_inputs)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_set_inputs, 1u);
	backing.PORT_RDY_set_inputs = PORT_RDY_set_inputs;
      }
      ++num;
      if ((backing.PORT_get_outputs) != PORT_get_outputs)
      {
	vcd_write_val(sim_hdl, num, PORT_get_outputs, 13u);
	backing.PORT_get_outputs = PORT_get_outputs;
      }
      ++num;
      if ((backing.PORT_set_inputs_inputs) != PORT_set_inputs_inputs)
      {
	vcd_write_val(sim_hdl, num, PORT_set_inputs_inputs, 21u);
	backing.PORT_set_inputs_inputs = PORT_set_inputs_inputs;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_bit_counter, 1u);
      backing.DEF_CAN_FIRE_RL_bit_counter = DEF_CAN_FIRE_RL_bit_counter;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_m1_fsm, 1u);
      backing.DEF_CAN_FIRE_RL_m1_fsm = DEF_CAN_FIRE_RL_m1_fsm;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_m1_state_rule, 1u);
      backing.DEF_CAN_FIRE_RL_m1_state_rule = DEF_CAN_FIRE_RL_m1_state_rule;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_m2, 1u);
      backing.DEF_CAN_FIRE_RL_m2 = DEF_CAN_FIRE_RL_m2;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_m2_fsm, 1u);
      backing.DEF_CAN_FIRE_RL_m2_fsm = DEF_CAN_FIRE_RL_m2_fsm;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_rl_timer_5usec, 1u);
      backing.DEF_CAN_FIRE_RL_rl_timer_5usec = DEF_CAN_FIRE_RL_rl_timer_5usec;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_rx_scan_code_rl, 1u);
      backing.DEF_CAN_FIRE_RL_rx_scan_code_rl = DEF_CAN_FIRE_RL_rx_scan_code_rl;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_sample_ps2, 1u);
      backing.DEF_CAN_FIRE_RL_sample_ps2 = DEF_CAN_FIRE_RL_sample_ps2;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_shift_reg, 1u);
      backing.DEF_CAN_FIRE_RL_shift_reg = DEF_CAN_FIRE_RL_shift_reg;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_timer_counter_5usec, 1u);
      backing.DEF_CAN_FIRE_RL_timer_counter_5usec = DEF_CAN_FIRE_RL_timer_counter_5usec;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_timer_counter_60usec, 1u);
      backing.DEF_CAN_FIRE_RL_timer_counter_60usec = DEF_CAN_FIRE_RL_timer_counter_60usec;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_get_outputs, 1u);
      backing.DEF_CAN_FIRE_get_outputs = DEF_CAN_FIRE_get_outputs;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_set_inputs, 1u);
      backing.DEF_CAN_FIRE_set_inputs = DEF_CAN_FIRE_set_inputs;
      vcd_write_val(sim_hdl, num++, DEF_NOT_reset___d110, 1u);
      backing.DEF_NOT_reset___d110 = DEF_NOT_reset___d110;
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_bit_counter, 1u);
      backing.DEF_WILL_FIRE_RL_bit_counter = DEF_WILL_FIRE_RL_bit_counter;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_m1_fsm, 1u);
      backing.DEF_WILL_FIRE_RL_m1_fsm = DEF_WILL_FIRE_RL_m1_fsm;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_m1_state_rule, 1u);
      backing.DEF_WILL_FIRE_RL_m1_state_rule = DEF_WILL_FIRE_RL_m1_state_rule;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_m2, 1u);
      backing.DEF_WILL_FIRE_RL_m2 = DEF_WILL_FIRE_RL_m2;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_m2_fsm, 1u);
      backing.DEF_WILL_FIRE_RL_m2_fsm = DEF_WILL_FIRE_RL_m2_fsm;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_rl_timer_5usec, 1u);
      backing.DEF_WILL_FIRE_RL_rl_timer_5usec = DEF_WILL_FIRE_RL_rl_timer_5usec;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_rx_scan_code_rl, 1u);
      backing.DEF_WILL_FIRE_RL_rx_scan_code_rl = DEF_WILL_FIRE_RL_rx_scan_code_rl;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_sample_ps2, 1u);
      backing.DEF_WILL_FIRE_RL_sample_ps2 = DEF_WILL_FIRE_RL_sample_ps2;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_shift_reg, 1u);
      backing.DEF_WILL_FIRE_RL_shift_reg = DEF_WILL_FIRE_RL_shift_reg;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_timer_counter_5usec, 1u);
      backing.DEF_WILL_FIRE_RL_timer_counter_5usec = DEF_WILL_FIRE_RL_timer_counter_5usec;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_timer_counter_60usec, 1u);
      backing.DEF_WILL_FIRE_RL_timer_counter_60usec = DEF_WILL_FIRE_RL_timer_counter_60usec;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_set_inputs, 1u);
      backing.DEF_WILL_FIRE_set_inputs = DEF_WILL_FIRE_set_inputs;
      vcd_write_val(sim_hdl, num++, DEF__read__h421, 4u);
      backing.DEF__read__h421 = DEF__read__h421;
      vcd_write_val(sim_hdl, num++, DEF__read__h519, 12u);
      backing.DEF__read__h519 = DEF__read__h519;
      vcd_write_val(sim_hdl, num++, DEF__read__h953, 8u);
      backing.DEF__read__h953 = DEF__read__h953;
      vcd_write_val(sim_hdl, num++, DEF_bit_count_0_EQ_11___d116, 1u);
      backing.DEF_bit_count_0_EQ_11___d116 = DEF_bit_count_0_EQ_11___d116;
      vcd_write_val(sim_hdl, num++, DEF_enable_timer_60usec__h2716, 1u);
      backing.DEF_enable_timer_60usec__h2716 = DEF_enable_timer_60usec__h2716;
      vcd_write_val(sim_hdl, num++, DEF_m1_state_EQ_0___d12, 1u);
      backing.DEF_m1_state_EQ_0___d12 = DEF_m1_state_EQ_0___d12;
      vcd_write_val(sim_hdl, num++, DEF_m1_state_EQ_13_0_OR_m1_state_EQ_9_8___d123, 1u);
      backing.DEF_m1_state_EQ_13_0_OR_m1_state_EQ_9_8___d123 = DEF_m1_state_EQ_13_0_OR_m1_state_EQ_9_8___d123;
      vcd_write_val(sim_hdl, num++, DEF_m1_state_EQ_13___d10, 1u);
      backing.DEF_m1_state_EQ_13___d10 = DEF_m1_state_EQ_13___d10;
      vcd_write_val(sim_hdl, num++, DEF_m1_state_EQ_1___d9, 1u);
      backing.DEF_m1_state_EQ_1___d9 = DEF_m1_state_EQ_1___d9;
      vcd_write_val(sim_hdl, num++, DEF_m1_state_EQ_9___d48, 1u);
      backing.DEF_m1_state_EQ_9___d48 = DEF_m1_state_EQ_9___d48;
      vcd_write_val(sim_hdl, num++, DEF_m1_state__h1130, 4u);
      backing.DEF_m1_state__h1130 = DEF_m1_state__h1130;
      vcd_write_val(sim_hdl, num++, DEF_ps2_clk_s__h1243, 1u);
      backing.DEF_ps2_clk_s__h1243 = DEF_ps2_clk_s__h1243;
      vcd_write_val(sim_hdl, num++, DEF_ps2_data_s__h2093, 1u);
      backing.DEF_ps2_data_s__h2093 = DEF_ps2_data_s__h2093;
      vcd_write_val(sim_hdl, num++, DEF_q__h2907, 11u);
      backing.DEF_q__h2907 = DEF_q__h2907;
      vcd_write_val(sim_hdl, num++, DEF_reset_OR_bit_count_0_EQ_11_16___d118, 1u);
      backing.DEF_reset_OR_bit_count_0_EQ_11_16___d118 = DEF_reset_OR_bit_count_0_EQ_11_16___d118;
      vcd_write_val(sim_hdl, num++, DEF_reset__h1087, 1u);
      backing.DEF_reset__h1087 = DEF_reset__h1087;
      vcd_write_val(sim_hdl, num++, DEF_timer_5usec_count_7_EQ_divide_reg_i_8_MINUS_1_9___d40, 1u);
      backing.DEF_timer_5usec_count_7_EQ_divide_reg_i_8_MINUS_1_9___d40 = DEF_timer_5usec_count_7_EQ_divide_reg_i_8_MINUS_1_9___d40;
      vcd_write_val(sim_hdl, num++, DEF_timer_60usec_count_2_EQ_2950___d33, 1u);
      backing.DEF_timer_60usec_count_2_EQ_2950___d33 = DEF_timer_60usec_count_2_EQ_2950___d33;
      vcd_write_val(sim_hdl, num++, DEF_tx_write__h1774, 1u);
      backing.DEF_tx_write__h1774 = DEF_tx_write__h1774;
      vcd_write_val(sim_hdl, num++, DEF_x__h2861, 8u);
      backing.DEF_x__h2861 = DEF_x__h2861;
      vcd_write_val(sim_hdl, num++, PORT_EN_set_inputs, 1u);
      backing.PORT_EN_set_inputs = PORT_EN_set_inputs;
      vcd_write_val(sim_hdl, num++, PORT_RDY_get_outputs, 1u);
      backing.PORT_RDY_get_outputs = PORT_RDY_get_outputs;
      vcd_write_val(sim_hdl, num++, PORT_RDY_set_inputs, 1u);
      backing.PORT_RDY_set_inputs = PORT_RDY_set_inputs;
      vcd_write_val(sim_hdl, num++, PORT_get_outputs, 13u);
      backing.PORT_get_outputs = PORT_get_outputs;
      vcd_write_val(sim_hdl, num++, PORT_set_inputs_inputs, 21u);
      backing.PORT_set_inputs_inputs = PORT_set_inputs_inputs;
    }
}

void MOD_mkMouse::vcd_prims(tVCDDumpType dt, MOD_mkMouse &backing)
{
  INST_bit_count.dump_VCD(dt, backing.INST_bit_count);
  INST_divide_reg_i.dump_VCD(dt, backing.INST_divide_reg_i);
  INST_enable_timer_5usec.dump_VCD(dt, backing.INST_enable_timer_5usec);
  INST_enable_timer_60usec.dump_VCD(dt, backing.INST_enable_timer_60usec);
  INST_m1_next_state.dump_VCD(dt, backing.INST_m1_next_state);
  INST_m1_state.dump_VCD(dt, backing.INST_m1_state);
  INST_m2_next_state.dump_VCD(dt, backing.INST_m2_next_state);
  INST_m2_state.dump_VCD(dt, backing.INST_m2_state);
  INST_ps2_clk_hi_z.dump_VCD(dt, backing.INST_ps2_clk_hi_z);
  INST_ps2_clk_i.dump_VCD(dt, backing.INST_ps2_clk_i);
  INST_ps2_clk_ms.dump_VCD(dt, backing.INST_ps2_clk_ms);
  INST_ps2_clk_s.dump_VCD(dt, backing.INST_ps2_clk_s);
  INST_ps2_data_hi_z.dump_VCD(dt, backing.INST_ps2_data_hi_z);
  INST_ps2_data_i.dump_VCD(dt, backing.INST_ps2_data_i);
  INST_ps2_data_ms.dump_VCD(dt, backing.INST_ps2_data_ms);
  INST_ps2_data_s.dump_VCD(dt, backing.INST_ps2_data_s);
  INST_q.dump_VCD(dt, backing.INST_q);
  INST_reset.dump_VCD(dt, backing.INST_reset);
  INST_rx_data_ready.dump_VCD(dt, backing.INST_rx_data_ready);
  INST_rx_read.dump_VCD(dt, backing.INST_rx_read);
  INST_rx_released.dump_VCD(dt, backing.INST_rx_released);
  INST_rx_scan_code.dump_VCD(dt, backing.INST_rx_scan_code);
  INST_timer_5usec.dump_VCD(dt, backing.INST_timer_5usec);
  INST_timer_5usec_count.dump_VCD(dt, backing.INST_timer_5usec_count);
  INST_timer_60usec_count.dump_VCD(dt, backing.INST_timer_60usec_count);
  INST_timer_done.dump_VCD(dt, backing.INST_timer_done);
  INST_tx_data.dump_VCD(dt, backing.INST_tx_data);
  INST_tx_error_no_ack.dump_VCD(dt, backing.INST_tx_error_no_ack);
  INST_tx_write.dump_VCD(dt, backing.INST_tx_write);
}
