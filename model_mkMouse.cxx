/*
 * Generated by Bluespec Compiler, version 2021.12.1 (build fd501401)
 * 
 * On Sat Jun 14 19:50:45 IST 2025
 * 
 */
#include "bluesim_primitives.h"
#include "model_mkMouse.h"

#include <cstdlib>
#include <time.h>
#include "bluesim_kernel_api.h"
#include "bs_vcd.h"
#include "bs_reset.h"


/* Constructor */
MODEL_mkMouse::MODEL_mkMouse()
{
  mkMouse_instance = NULL;
}

/* Function for creating a new model */
void * new_MODEL_mkMouse()
{
  MODEL_mkMouse *model = new MODEL_mkMouse();
  return (void *)(model);
}

/* Schedule functions */

static void schedule_posedge_CLK(tSimStateHdl simHdl, void *instance_ptr)
       {
	 MOD_mkMouse &INST_top = *((MOD_mkMouse *)(instance_ptr));
	 INST_top.DEF_CAN_FIRE_RL_m1_state_rule = (tUInt8)1u;
	 INST_top.DEF_WILL_FIRE_RL_m1_state_rule = INST_top.DEF_CAN_FIRE_RL_m1_state_rule;
	 INST_top.DEF_CAN_FIRE_RL_m1_fsm = (tUInt8)1u;
	 INST_top.DEF_WILL_FIRE_RL_m1_fsm = INST_top.DEF_CAN_FIRE_RL_m1_fsm && !(INST_top.DEF_WILL_FIRE_RL_m1_state_rule);
	 INST_top.DEF_CAN_FIRE_RL_bit_counter = (tUInt8)1u;
	 INST_top.DEF_WILL_FIRE_RL_bit_counter = INST_top.DEF_CAN_FIRE_RL_bit_counter && !(INST_top.DEF_WILL_FIRE_RL_m1_fsm);
	 INST_top.DEF_CAN_FIRE_RL_m2 = (tUInt8)1u;
	 INST_top.DEF_WILL_FIRE_RL_m2 = INST_top.DEF_CAN_FIRE_RL_m2;
	 INST_top.DEF_CAN_FIRE_RL_m2_fsm = (tUInt8)1u;
	 INST_top.DEF_WILL_FIRE_RL_m2_fsm = INST_top.DEF_CAN_FIRE_RL_m2_fsm && !(INST_top.DEF_WILL_FIRE_RL_m2);
	 INST_top.DEF_CAN_FIRE_RL_rl_timer_5usec = (tUInt8)1u;
	 INST_top.DEF_WILL_FIRE_RL_rl_timer_5usec = INST_top.DEF_CAN_FIRE_RL_rl_timer_5usec;
	 INST_top.DEF_CAN_FIRE_RL_rx_scan_code_rl = (tUInt8)1u;
	 INST_top.DEF_WILL_FIRE_RL_rx_scan_code_rl = INST_top.DEF_CAN_FIRE_RL_rx_scan_code_rl;
	 INST_top.DEF_CAN_FIRE_RL_sample_ps2 = (tUInt8)1u;
	 INST_top.DEF_WILL_FIRE_RL_sample_ps2 = INST_top.DEF_CAN_FIRE_RL_sample_ps2;
	 INST_top.DEF_CAN_FIRE_RL_shift_reg = (tUInt8)1u;
	 INST_top.DEF_WILL_FIRE_RL_shift_reg = INST_top.DEF_CAN_FIRE_RL_shift_reg;
	 INST_top.DEF_CAN_FIRE_RL_timer_counter_5usec = (tUInt8)1u;
	 INST_top.DEF_WILL_FIRE_RL_timer_counter_5usec = INST_top.DEF_CAN_FIRE_RL_timer_counter_5usec && !(INST_top.DEF_WILL_FIRE_RL_m1_fsm);
	 INST_top.DEF_CAN_FIRE_RL_timer_counter_60usec = (tUInt8)1u;
	 INST_top.DEF_WILL_FIRE_RL_timer_counter_60usec = (INST_top.DEF_CAN_FIRE_RL_timer_counter_60usec && !(INST_top.DEF_WILL_FIRE_RL_bit_counter)) && !(INST_top.DEF_WILL_FIRE_RL_m1_fsm);
	 INST_top.DEF_WILL_FIRE_set_inputs = INST_top.PORT_EN_set_inputs;
	 INST_top.METH_RDY_set_inputs();
	 if (INST_top.DEF_WILL_FIRE_RL_m2)
	   INST_top.RL_m2();
	 if (INST_top.DEF_WILL_FIRE_RL_timer_counter_5usec)
	   INST_top.RL_timer_counter_5usec();
	 if (INST_top.DEF_WILL_FIRE_RL_timer_counter_60usec)
	   INST_top.RL_timer_counter_60usec();
	 if (INST_top.DEF_WILL_FIRE_RL_rl_timer_5usec)
	   INST_top.RL_rl_timer_5usec();
	 if (INST_top.DEF_WILL_FIRE_RL_m1_fsm)
	   INST_top.RL_m1_fsm();
	 if (INST_top.DEF_WILL_FIRE_RL_m2_fsm)
	   INST_top.RL_m2_fsm();
	 if (INST_top.DEF_WILL_FIRE_RL_rx_scan_code_rl)
	   INST_top.RL_rx_scan_code_rl();
	 if (INST_top.DEF_WILL_FIRE_RL_bit_counter)
	   INST_top.RL_bit_counter();
	 if (INST_top.DEF_WILL_FIRE_RL_shift_reg)
	   INST_top.RL_shift_reg();
	 if (INST_top.DEF_WILL_FIRE_RL_m1_state_rule)
	   INST_top.RL_m1_state_rule();
	 if (INST_top.DEF_WILL_FIRE_RL_sample_ps2)
	   INST_top.RL_sample_ps2();
	 if (INST_top.DEF_WILL_FIRE_set_inputs)
	   INST_top.METH_set_inputs(INST_top.PORT_set_inputs_inputs);
	 if (do_reset_ticks(simHdl))
	 {
	   INST_top.INST_rx_released.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_rx_scan_code.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_rx_data_ready.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_tx_error_no_ack.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_timer_done.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_timer_5usec.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_q.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_m1_state.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_m1_next_state.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_m2_state.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_m2_next_state.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_bit_count.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_enable_timer_60usec.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_enable_timer_5usec.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_timer_60usec_count.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_timer_5usec_count.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_ps2_clk_s.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_ps2_data_s.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_ps2_clk_hi_z.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_ps2_data_hi_z.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_ps2_clk_ms.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_ps2_data_ms.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_reset.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_ps2_clk_i.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_ps2_data_i.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_tx_data.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_tx_write.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_rx_read.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_divide_reg_i.rst_tick__clk__1((tUInt8)1u);
	 }
       };

/* Model creation/destruction functions */

void MODEL_mkMouse::create_model(tSimStateHdl simHdl, bool master)
{
  sim_hdl = simHdl;
  init_reset_request_counters(sim_hdl);
  mkMouse_instance = new MOD_mkMouse(sim_hdl, "top", NULL);
  bk_get_or_define_clock(sim_hdl, "CLK");
  if (master)
  {
    bk_alter_clock(sim_hdl, bk_get_clock_by_name(sim_hdl, "CLK"), CLK_LOW, false, 0llu, 5llu, 5llu);
    bk_use_default_reset(sim_hdl);
  }
  bk_set_clock_event_fn(sim_hdl,
			bk_get_clock_by_name(sim_hdl, "CLK"),
			schedule_posedge_CLK,
			NULL,
			(tEdgeDirection)(POSEDGE));
  (mkMouse_instance->set_clk_0)("CLK");
}
void MODEL_mkMouse::destroy_model()
{
  delete mkMouse_instance;
  mkMouse_instance = NULL;
}
void MODEL_mkMouse::reset_model(bool asserted)
{
  (mkMouse_instance->reset_RST_N)(asserted ? (tUInt8)0u : (tUInt8)1u);
}
void * MODEL_mkMouse::get_instance()
{
  return mkMouse_instance;
}

/* Fill in version numbers */
void MODEL_mkMouse::get_version(char const **name, char const **build)
{
  *name = "2021.12.1";
  *build = "fd501401";
}

/* Get the model creation time */
time_t MODEL_mkMouse::get_creation_time()
{
  
  /* Sat Jun 14 14:20:45 UTC 2025 */
  return 1749910845llu;
}

/* State dumping function */
void MODEL_mkMouse::dump_state()
{
  (mkMouse_instance->dump_state)(0u);
}

/* VCD dumping functions */
MOD_mkMouse & mkMouse_backing(tSimStateHdl simHdl)
{
  static MOD_mkMouse *instance = NULL;
  if (instance == NULL)
  {
    vcd_set_backing_instance(simHdl, true);
    instance = new MOD_mkMouse(simHdl, "top", NULL);
    vcd_set_backing_instance(simHdl, false);
  }
  return *instance;
}
void MODEL_mkMouse::dump_VCD_defs()
{
  (mkMouse_instance->dump_VCD_defs)(vcd_depth(sim_hdl));
}
void MODEL_mkMouse::dump_VCD(tVCDDumpType dt)
{
  (mkMouse_instance->dump_VCD)(dt, vcd_depth(sim_hdl), mkMouse_backing(sim_hdl));
}
